import mascotas.* 
describe "mascotas" {
	
	
	const spike = new Perro(guardia=40) // un perro común
	const sam = new Labrador(guardia=15)
	const silvestre = new Gato(porcentajeAmor=0.8, seguridad=23)
	const tom = new Gato(porcentajeAmor=0.20, seguridad=12)
	const pluto = new Perro(guardia=15)
	const droopy = new Perro(guardia=30)
	const tweety = new Canario()
	const woody = new Canario()
	
	const atahualpa = new Sensible(edad = 50, afecto=10, mascotas = #{silvestre, woody})
	const mercedes = new Intenso(edad=40, afecto=20, mascotas=#{spike,sam, droopy} )
	const teresa = new Calido( edad = 60, afecto=15, mascotas = #{tweety})
	const soledad = new Hipersensible(edad = 16, afecto=35, mascotas = #{tom, pluto})
	
	const clubDuenios = new Club(duenios=#{atahualpa, mercedes, teresa, soledad})
	
	test "1.1.1 nivel de amor" {
		assert.equals(40, spike.amor(mercedes))
		assert.equals(45, sam.amor(mercedes))
		assert.equals(8, silvestre.amor(atahualpa))
		assert.equals(0, tweety.amor(teresa))
	}

	test "1.1.2 nivel de diversion" {
		assert.equals(30, spike.diversion(mercedes))
		assert.equals(30, sam.diversion(mercedes))
		assert.equals(15, silvestre.diversion(atahualpa))
		assert.equals(20, tom.diversion(soledad))	
		assert.equals(5, tweety.diversion(teresa))
	}

	test "1.1.3 nivel de seguridad" {
		assert.equals(40, spike.seguridad(mercedes))
		assert.equals(22, pluto.seguridad(soledad))
		assert.equals(30, sam.seguridad(mercedes))
		assert.equals(23, silvestre.seguridad(atahualpa))
		assert.equals(0, tweety.seguridad(teresa))
	}
	
	test "2. felicidad" {
		assert.that(atahualpa.seguro())
		assert.that(soledad.seguro()) 
		assert.notThat(teresa.seguro()) 
		assert.that(mercedes.seguro())

		assert.notThat(atahualpa.alegre()) 
		assert.that(soledad.alegre()) 
		assert.notThat(teresa.alegre())
		assert.that(mercedes.alegre())
		
		assert.notThat(atahualpa.feliz()) //no es alegre
		assert.that(soledad.feliz())  
		assert.notThat(teresa.feliz()) //no es ni segura ni alegre
		assert.that(mercedes.feliz())
	}

	test "3.1 entrenamiento sensible" {
		assert.equals(10, atahualpa.eficacia())
		atahualpa.entrenar() 
		assert.equals(0.81, silvestre.porcentajeAmor())
		assert.equals(1, silvestre.entrenamientos())
		assert.equals(1,woody.entrenamientos())

		atahualpa.entrenar() 
		assert.equals(0.82, silvestre.porcentajeAmor())
		assert.equals(2, silvestre.entrenamientos())
		assert.equals(2,woody.entrenamientos())
	}
	
	test "3.2 entrenamiento hipersensible" {
		assert.equals(35, soledad.eficacia())
		soledad.entrenar() 
		assert.equals(0.22, tom.porcentajeAmor())
		assert.equals(18.5, pluto.guardia())
		assert.equals(1, tom.entrenamientos())
		assert.equals(1, pluto.entrenamientos())

		soledad.entrenar() 
		assert.equals(0.24, tom.porcentajeAmor())
		assert.equals(22, pluto.guardia())
		assert.equals(2, tom.entrenamientos())
		assert.equals(2, pluto.entrenamientos())
	}
	
	test "3.3 entrenamiento calido" {
		assert.throwsException({teresa.entrenar()}) 
		assert.equals(0, tweety.entrenamientos())
		assert.equals(0, teresa.eficacia())
	} 
	
	
	test "3.4 entrenamiento intenso" {
		assert.throwsException({mercedes.entrenar()}) 
		assert.equals(40, spike.guardia())
		assert.equals(15,sam.guardia())
		assert.equals(30,droopy.guardia())
		assert.equals(0,spike.entrenamientos())
		assert.equals(0,sam.entrenamientos())
		assert.equals(0,droopy.entrenamientos())
	}
	
	test "4 club de dueños" {
		assert.equals(#{silvestre, spike, tweety, pluto}, clubDuenios.mascotasSeguras())
		assert.equals(#{atahualpa, mercedes, soledad}, clubDuenios.fanaticos())
	}

	
}
